from flask import Flask, request, jsonify
import joblib
from sklearn.feature_extraction.text import TfidfVectorizer
import numpy as np

app = Flask(__name__)

# Load the saved grid search object
loaded_grid_search = joblib.load('gs_clf.pkl')

# Extract the best estimator (including the TfidfVectorizer)
best_estimator = loaded_grid_search.best_estimator_

# Extract the TfidfVectorizer from the best estimator
tokenizer = best_estimator.named_steps['tfidf']

# Preprocess function using the loaded tokenizer
def preprocess_sms_text(text):
    # Tokenize the text and remove stopwords
    text_tokens = tokenizer.transform([text])
    preprocessed_text = ' '.join(text_tokens.toarray().astype(str))

    return preprocessed_text

@app.route("/receive-sms", methods=["POST"])
def receive_sms():
    try:
        # Get JSON data from the request//
        sms_data = request.get_json()
        print(sms_data)
        header = sms_data.get("header", "")
        body = sms_data.get("Body", "")
        print(header)
        print(body)



       # Ensure 'Body' is not empty
        if not body:
            return jsonify({"error": "Empty SMS body"}), 400

        # Make predictions using the loaded model
        predicted_label = best_estimator.predict([body])
        result=str(predicted_label[0])

        # print("------------------------------>"+predicted_label);
        
        # response_data = {
        #     "message": "Received and processed SMS body: "
        # }
        # result = str(response_data[0])
        # print(result)
        return result, 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    app.run(debug=True)








































# from flask import Flask, request, jsonify
# import requests
# import joblib
# import sklearn
# app = Flask(__name__)

# # Define the URL of your Django API endpoint
# URL = "http://localhost:5000" # Update this URL
# @app.route("/receive-sms", methods=["GET", "POST"])
# def receive_sms():
#     if request.method == "GET":
#         # This is a GET request, you can handle it as needed
#         return jsonify({"message": "This is a GET request."}), 200

#     if request.method == "POST":
#         try:
#             # Get JSON data from the request
#             sms_data = request.get_json()
#             print(sms_data)
            
#             # Extract the "Body" content
#             sms_body = sms_data.get("Body", "")
#             print(sms_body)

#             # Load the saved model from the .pkl file
#             loaded_model = joblib.load('gs_clf.pkl')

#             # Now, you can use the loaded model to make predictions or perform other tasks
#             predicted_nb = loaded_model.predict([sms_body])
#             print(predicted_nb)



            
#             # Return a response (replace this with your desired response)
#             return jsonify({"message": "Received and processed SMS body: " + sms_body}), 200

#         except Exception as e:
#             return jsonify({"error": str(e)}), 500

# if __name__ == "__main__":
#     app.run(debug=True)

#         # if sms_.status_code == 201:
              
#         # # header, body, if model = header--->
#         # return jsonify({"message": "Message successfully sent to the backend."}), 201
#         # else:
#         # return jsonify({"message": "Failed to send the message to the backend."}), 400